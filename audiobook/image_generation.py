"""Module contains function for generating audiobook image for video."""

from io import BytesIO
from typing import Protocol
import os
from PIL import Image
from google import genai
from google.genai import types
from google.cloud import aiplatform
import google
from dotenv import load_dotenv

# Load .env variables
load_dotenv()

# --- Interface Definitions ---

class IGoogleAuthenticator(Protocol):
    def authenticate(self) -> None: ...

class IImageGenerator(Protocol):
    def generate_image(self, prompt: str) -> bytes: ...

class IImageSaver(Protocol):
    def save_image(self, image_bytes: bytes, output_directory: str, output_filename: str) -> str: ...


# --- Implementation Classes ---

# debugging print statements may eventually be removed in production
class GoogleAuthenticator(IGoogleAuthenticator):
    def authenticate(self) -> None:
        try:
            credentials, project = google.auth.default()
            print(f"DEBUG: Authenticating as {getattr(credentials, 'service_account_email', getattr(credentials, 'quota_project_id', None))} for project {project}")
            print(f"DEBUG: Credentials type: {type(credentials)}")
            print(f"DEBUG: Credentials scopes: {getattr(credentials, 'scopes', 'N/A')}")
            # Ensure the project passed to the client matches the detected project
            aiplatform.init(project=project, location='us-east5')
        except Exception as e:
            print(f"Authentication/Initialization error: {e}")
            raise # Re-raise to see the full traceback

class VertexAIImageGenerator(IImageGenerator):
    def __init__(self, project_id: str, location: str, model_name: str = 'imagen-4.0-generate-preview-06-06'):
        self.project_id = project_id
        self.location = location
        self.model_name = model_name
        self.client = None
        self.ensure_client()

    def ensure_client(self):
        # Initialize the generative AI client for Vertex AI
        try:
            self.client = genai.Client(
                vertexai=True,
                project=self.project_id,
                location=self.location
            )
            print(f"Initialized Vertex AI client for project '{self.project_id}' in location '{self.location}'.")
        except Exception as e:
            raise ConnectionError(
                f"Failed to initialize Vertex AI client. Ensure `gcloud auth application-default login` "
                f"has been run and Vertex AI API is enabled for project '{self.project_id}'. Error: {e}"
            ) from e

    def generate_image(self, prompt: str) -> bytes:
        try:
            print(f"Generating image with Imagen model: '{self.model_name}' and prompt: '{prompt}'")

            response = self.client.models.generate_images(
                model=self.model_name,
                prompt=prompt,
                config=types.GenerateImagesConfig(
                    number_of_images=1,  # Explicitly set to 1, though it was already 1
                    aspect_ratio="16:9",  # Supported: "1:1", "3:4", "4:3", "9:16", "16:9"
                    # safety_filter_level="BLOCK_MEDIUM_AND_ABOVE", # Adjust as needed
                    person_generation="ALLOW_ADULT", # Adjust as needed if generating people
                    # add_watermark=True # Default is True, set to False if you don't want watermarks (requires specific model support)
                ),
            )

            if response.generated_images:
                # Since number_of_images is 1, we can directly access the first (and only) image
                return response.generated_images[0].image.image_bytes
            else:
                print("No image was generated by Imagen.")
                if response.safety_ratings:
                    print("Safety ratings for prompt:", response.safety_ratings)
                if response.filtered_reason: # Imagen has this for filtered content
                    print("Filtered reason:", response.filtered_reason)
                raise RuntimeError("Imagen generation failed: no image returned by API.")
        except Exception as e:
            print(f"An error occurred during Imagen generation: {e}")
            print("\nEnsure you have enabled the Vertex AI API in your Google Cloud project,")
            print("and that your `gcloud` authentication is set up correctly (`gcloud auth application-default login`).")
            raise

class PILImageSaver(IImageSaver):
    def save_image(self, image_bytes: bytes, output_directory: str, output_filename: str) -> str:
        # Create the output directory if it doesn't exist
        if not os.path.exists(output_directory):
            os.makedirs(output_directory)
            print(f"Created output directory: {output_directory}")

            # Construct the full output path
            # Ensure the output_filename has an extension, or append default
            base_name, ext = os.path.splitext(output_filename)
            if not ext: # If no extension was provided in output_filename
                ext = '.png'
            full_output_path = os.path.join(output_directory, f"{base_name}{ext}")

            try:
                image = Image.open(BytesIO(image_bytes))
                image.save(full_output_path)
                print(f"Saved generated image to {full_output_path}")
                return full_output_path
            except Exception as e:
                print(f"Error saving image: {e}")
                raise

# --- Utility Classes ---

def get_env_or_raise(var: str, friendly: str):
    val = os.environ.get(var)
    if not val:
        raise ValueError(f"Please set the '{var}' environment variable ({friendly}).")
    return val

# --- High-level Service ---

class CoverImageService:
    def __init__(
        self,
        authenticator: IGoogleAuthenticator,
        image_generator: IImageGenerator,
        image_saver: IImageSaver,
    ):
        self.authenticator = authenticator
        self.image_generator = image_generator
        self.image_saver = image_saver

    def create_cover_image(self, prompt: str, output_directory: str, output_filename: str) -> str:
        self.authenticator.authenticate()
        image_bytes = self.image_generator.generate_image(prompt)
        output_path = self.image_saver.save_image(image_bytes, output_directory, output_filename)
        return output_path
